Map -> Matrice (fixer la taille au début + pas discrétisation => résolution correcte mais pas trop élevée)
	- Rajouter ligne-colonne si besoin (voir au niveau du temps de calcul si génant)
	- Points:
		* 0 : zone inconnue
		* 1 : obstacle
		* 2 : zone libre
	- fonction 'round' pour arrondir positions + ajuster en fonction position robot = ajouter les points dans la matrice

Placer robot au milieu de la matrice
Le faire tourner au début (360°) histoire de voir ce qui l'entoure
matrice 'contacts' => liste de 0 et 1 pour les points qui sont des contacts


Tests clignotement
	- Méthode Mohamed (436 steps)
		* mean : -0.0018
		* min : -0.4362
		* max : 0.0122
		* entre 20 et 30 ms
	- Méthode Arthur (516 steps)
		* mean : 0.0037
		* min : -0.4363
		* max : 0.0162
		* 3 ms max mais globalement en dessous de 1ms


Quand actualiser D* (path) ?
	- obstacle devant qui se rapproche trop (trop près) -> le faire ralentir

Entre 2 points : regarder sl_drivepoint(start, goal)
	-> fonction prend en compte plusieurs => vitesse (T et R)

Choisir le goal du Dstar ?
	- choisir un pixel libre intéressant (principe)
		|-> comment savoir si il est en dehors de la map ?
		|-> point assez proche
		|-> fonction pour aider à fixer l'objectif ?
	- Modifier le point si la valeur de la distancemap à la position du youbot est trop grande
		|-> Tester le Dstar dans un espace clot avec le goal en dehors => voir résultat
	- Voir comment afficher le chemin

ATTENTION : gérer les indices de Dstar par rapport aux notres


Gérer déplacement latéral ?
    - Mentir sur l'orientation du robot (controller) et vectoriser la vitesse pour qu'il s'y dirrige en 'crabe'