function youbot_project()
    clc, clear all, close all

    run('C:\Users\elosr\trs\matlab\startup_robot.m')
    
    
    %% Parameters
    use_getPosition = true;

    %% Initiate the connection to the simulator. 
    disp('Program started');
    
    vrep = remApi('remoteApi');
    vrep.simxFinish(-1);
    id = vrep.simxStart('127.0.0.1', 19997, true, true, 2000, 5);
    
    if id < 0
        disp('Failed connecting to remote API server. Exiting.');
        vrep.delete();
        return;
    end
    fprintf('Connection %d to remote API server open.\n', id);
    
    % Make sure to close the connection whenever the script is interrupted.
    cleanupObj = onCleanup(@() cleanup_vrep(vrep, id));
    
    vrep.simxStartSimulation(id, vrep.simx_opmode_oneshot_wait);
    
    % Retrieve all handles, and stream arm and wheel joints, the robot's pose, the Hokuyo, and the arm tip pose.
    h = youbot_init(vrep, id);
    h = youbot_hokuyo_init(vrep, h);
    
    pause(.2);

    %% Youbot constants
    % The time step the simulator is using (your code should run close to it). 
    timestep = .05;
    % Parameters for controlling the youBot's wheels: at each iteration, those values will be set for the wheels. 
    % They are adapted at each iteration by the code. 
    % Move straight ahead. 
    robotVel = [0,0]; % Go sideways. 
    rotateRightVel = 0; % Rotate. 
    prevOrientation = 0; % Previous angle to goal (easy way to have a condition on the robot's angular speed). 
    prevPosition = 0; % Previous distance to goal (easy way to have a condition on the robot's speed).
    
    
    % Youbot's map
    map = OccupancyMap([201 201], 0.25);
    center = round( (size(map.Map) + 1) /2 );
    
    dstar = youbotDstar(zeros(size(map.Map)), 'quiet');
    

    % Youbot initial position
    [res, originPos] = vrep.simxGetObjectPosition(id, h.ref, -1, vrep.simx_opmode_buffer);
    vrchk(vrep, res, true);
    prevPosition = originPos(1:2);
    [res, originEuler] = vrep.simxGetObjectOrientation(id, h.ref, -1, vrep.simx_opmode_buffer);
    vrchk(vrep, res, true);
    prevOrientation = originEuler(3);
    
    [res, youbotPos] = vrep.simxGetObjectPosition(id, h.ref, -1, vrep.simx_opmode_buffer);
    vrchk(vrep, res, true);
    % The points x, y will be the optimal path points generated by the dstar 
    % First points by default. If it works, we will Dstar after.
    
    x=-3;
    y=4;
    
    target=[x,y]; % target that the youbot will try to follow
        % Target position

    % Voir comment l'enlever
    [X, Y] = meshgrid(-5:map.MapRes:5, -5.5:map.MapRes:2.5);
    
    
    % Finite State Machine first state
    fsm = 'computePath';
    
    %% Start
    disp('Enter loop')
    while true
        start_loop = tic;
        
        if vrep.simxGetConnectionId(id) == -1
            error('Lost connection to remote API.');
        end
        
        % Get the position and the orientation of the robot. 
        [res, youbotPos] = vrep.simxGetObjectPosition(id, h.ref, -1, vrep.simx_opmode_buffer);
        vrchk(vrep, res, true);
        [res, youbotEuler] = vrep.simxGetObjectOrientation(id, h.ref, -1, vrep.simx_opmode_buffer);
        vrchk(vrep, res, true);
        
        
        %% Finite State Machine
       
            % Get sensor infos
            [pts, contacts] = youbot_hokuyo(vrep, h, vrep.simx_opmode_buffer);
            in = inpolygon(X, Y,...
                [h.hokuyo1Pos(1), pts(1, :), h.hokuyo2Pos(1)],...
                [h.hokuyo1Pos(2), pts(2, :), h.hokuyo2Pos(2)]);
            
            % Retrieve location information
            x_pts = youbotPos(1) - originPos(1) + X(in)*cos(youbotEuler(3)) - Y(in)*sin(youbotEuler(3));
            x_contact = youbotPos(1) - originPos(1) + pts(1, contacts)*cos(youbotEuler(3)) - pts(2, contacts)*sin(youbotEuler(3));

            y_pts = youbotPos(2) - originPos(2) + Y(in)*cos(youbotEuler(3)) + X(in)*sin(youbotEuler(3));
            y_contact = youbotPos(2) - originPos(2) + pts(2, contacts)*cos(youbotEuler(3)) + pts(1, contacts)*sin(youbotEuler(3));

            map.addPoints(-round(y_pts/map.MapRes) + center(1), round(x_pts/map.MapRes) + center(2), map.Free);
            map.addPoints(-round(y_contact/map.MapRes) + center(1), round(x_contact/map.MapRes) + center(2), map.Wall);
            
            currentPosIndex = [youbotPos(1) - originPos(1) + center(1)*map.MapRes,-(youbotPos(2) - originPos(2)) + center(2)*map.MapRes];
            
        dstar.modify_cost([round(y_contact/map.MapRes) + center(2) ;-round(x_contact/map.MapRes) + center(1)], Inf);
    
        if strcmp(fsm, 'computePath')
            
            goal=round((target-originPos(1:2))/map.MapRes) + center;
            %goal = [-round((target(1)-originPos(1))/map.MapRes) + center(1),round((target(2)-originPos(2))/map.MapRes) + center(1)];
            dstar.plan([size(map.Map,2)-goal(2),size(map.Map,1)-goal(1)]);
            %dstar.plan(goal);
            currentPosIndex_ = round((youbotPos(1:2)-originPos(1:2))/map.MapRes) + center;
            targetPointsIndex=dstar.path([currentPosIndex_(2),currentPosIndex_(1)]);
            targetPointsXY = [(targetPointsIndex(:,2)-center(1))*map.MapRes+originPos(1),(targetPointsIndex(:,1)-center(2))*map.MapRes+originPos(2)];
            targetPointsXY_DS=downsample(targetPointsXY,4); % Downsample of targetPointsXY
            i=1;
            fsm='rotate';

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
        elseif strcmp(fsm, 'rotate')
        if youbotPos(1)>=targetPointsXY_DS(i,1) && youbotPos(2)<=targetPointsXY_DS(i,2)
            angl=atan((targetPointsXY_DS(i,2)-youbotPos(2))/(targetPointsXY_DS(i,1)-youbotPos(1)))-pi/2;
        elseif  youbotPos(1)>=targetPointsXY_DS(i,1) && youbotPos(2)>=targetPointsXY_DS(i,2)
            angl=-atan((targetPointsXY_DS(i,2)-youbotPos(2))/(targetPointsXY_DS(i,1)-youbotPos(1)));
        elseif youbotPos(1)<=targetPointsXY_DS(i,1)  && youbotPos(2)<=targetPointsXY_DS(i,2)
            angl=atan((targetPointsXY_DS(i,2)-youbotPos(2))/(targetPointsXY_DS(i,1)-youbotPos(1)))+pi/2;
        elseif youbotPos(1)<=targetPointsXY_DS(i,1) && youbotPos(2)>=targetPointsXY_DS(i,2)
            angl=-atan((targetPointsXY_DS(i,2)-youbotPos(2))/(targetPointsXY_DS(i,1)-youbotPos(1)));
        end
            %% First, rotate the robot to go to one table.             
            % The rotation velocity depends on the difference between the current angle and the target. 
            rotateRightVel = angdiff(angl, youbotEuler(3));
            
            % When the rotation is done (with a sufficiently high precision), move on to the next state. 
            if (abs(angdiff(angl, youbotEuler(3))) < 10 / 180 * pi) && ...
                    (abs(angdiff(prevOrientation, youbotEuler(3))) < 1 / 180 * pi)
                rotateRightVel = 0;
                fsm = 'driveToTarget';
            end  
        elseif strcmp(fsm, 'driveToTarget')
            if angl >= -pi/2-pi/4 && angl<=-pi/4
                robotVel(1) = (targetPointsXY_DS(i,1)-youbotPos(1));
            elseif (angl >= -pi && angl<=-pi/2-pi/4) || (angl>=pi/2+pi/4 && angl<=pi)
                robotVel(1) = -(targetPointsXY_DS(i,2)-youbotPos(2));
            elseif (angl>=pi/4 && angl<=pi/2+pi/4)
                robotVel(1) = -(targetPointsXY_DS(i,1)-youbotPos(1));
            elseif (angl>=-pi/4 && angl<=pi/4)
                robotVel(1) = (targetPointsXY_DS(i,2)-youbotPos(2));%pos(2)-youbotPos(2);
            end
            i
            disp('CurrentTarget')
            targetPointsXY_DS(i,:)
            disp('FinalTarget')
            target
             %robotVel = -(targetPointsXY_DS(i,:)-youbotPos(1:2));
            % If the robot is sufficiently close and its speed is
            % sufficiently low, stop it and compute new target
            if (norm(youbotPos(1:2) - targetPointsXY_DS(i,:)) < 0.5) && (norm(youbotPos(1:2) - prevPosition) < 0.05)
                robotVel = [0,0];
                if i<size(targetPointsXY_DS,1)
                    i=i+1;
                    fsm='rotate';
                else
                    %target = [-1.5,3];
                    %fsm = 'computePath';%--> compute new goal ( find ==0 unknown) and iterate
                    disp('end')
                end
            end
        end

            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        % Previous position and orientation
        prevPosition = youbotPos(1:2);
        prevOrientation = youbotEuler(3);
        h = youbot_drive(vrep, h, robotVel(1), robotVel(2), rotateRightVel);
        figure(1)
        map.plot()
        hold on
        scatter(currentPosIndex(1),currentPosIndex(2), '*', 'r')
        %% Calculation time control
        ellapsed = toc(start_loop);
        remaining = timestep - ellapsed;
        if remaining > 0
            pause(min(remaining, .01));
        end
    end
end
